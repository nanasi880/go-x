package msgpack_test

import (
	"bytes"
	"math"
	"strings"
	"time"
)

type (
	nilTestCase struct {
		Value   interface{}
		MsgPack [][]byte
	}
	boolTestCase struct {
		Value   bool
		MsgPack [][]byte
	}
	uint8TestCase struct {
		Value   byte
		MsgPack [][]byte
	}
	uint16TestCase struct {
		Value   uint16
		MsgPack [][]byte
	}
	uint32TestCase struct {
		Value   uint32
		MsgPack [][]byte
	}
	uint64TestCase struct {
		Value   uint64
		MsgPack [][]byte
	}
	int8TestCase struct {
		Value   int8
		MsgPack [][]byte
	}
	int16TestCase struct {
		Value   int16
		MsgPack [][]byte
	}
	int32TestCase struct {
		Value   int32
		MsgPack [][]byte
	}
	int64TestCase struct {
		Value   int64
		MsgPack [][]byte
	}
	float32TestCase struct {
		Value   float32
		MsgPack [][]byte
	}
	float64TestCase struct {
		Value   float64
		MsgPack [][]byte
	}
	binaryTestCase struct {
		Value   []byte
		MsgPack [][]byte
	}
	stringTestCase struct {
		Value   string
		MsgPack [][]byte
	}
	arrayTestCase struct {
		Value   []int
		MsgPack [][]byte
	}
	mapTestCase struct {
		Value   map[int]int
		MsgPack [][]byte
	}
	timeTestCase struct {
		Value   time.Time
		MsgPack [][]byte
	}
	msgPackTestCase struct {
		Nil     []nilTestCase
		Bool    []boolTestCase
		Uint8   []uint8TestCase
		Uint16  []uint16TestCase
		Uint32  []uint32TestCase
		Uint64  []uint64TestCase
		Int8    []int8TestCase
		Int16   []int16TestCase
		Int32   []int32TestCase
		Int64   []int64TestCase
		Float32 []float32TestCase
		Float64 []float64TestCase
		String  []stringTestCase
		Binary  []binaryTestCase
		Array   []arrayTestCase
		Map     []mapTestCase
		Time    []timeTestCase
	}
)

var (
	msgPackTestSuite = msgPackTestCase{
		Nil: []nilTestCase{
			{
				Value:   nil,
				MsgPack: [][]byte{{0xc0}},
			},
		},
		Bool: []boolTestCase{
			{
				Value:   false,
				MsgPack: [][]byte{{0xc2}},
			},
			{
				Value:   true,
				MsgPack: [][]byte{{0xc3}},
			},
		},
		Uint8: []uint8TestCase{
			{
				Value: 127,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // uint8
					{0xd1, 0x00, 0x7f},             // uint16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
				},
			},
			{
				Value: 255,
				MsgPack: [][]byte{
					{0xcc, 0xff},                   // uint8
					{0xcd, 0x00, 0xff},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0xff}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, // uint64
				},
			},
		},
		Uint16: []uint16TestCase{
			// uint8
			{
				Value: 127,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // uint8
					{0xd1, 0x00, 0x7f},             // uint16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
				},
			},
			{
				Value: 255,
				MsgPack: [][]byte{
					{0xcc, 0xff},                   // uint8
					{0xcd, 0x00, 0xff},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0xff}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, // uint64
				},
			},
			// uint16
			{
				Value: 256,
				MsgPack: [][]byte{
					{0xcd, 0x01, 0x00},                                     // uint16
					{0xce, 0x00, 0x00, 0x01, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00}, // uint64
				},
			},
			{
				Value: 65535,
				MsgPack: [][]byte{
					{0xcd, 0xff, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff}, // uint64
				},
			},
		},
		Uint32: []uint32TestCase{
			// uint8
			{
				Value: 127,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // uint8
					{0xd1, 0x00, 0x7f},             // uint16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
				},
			},
			{
				Value: 255,
				MsgPack: [][]byte{
					{0xcc, 0xff},                   // uint8
					{0xcd, 0x00, 0xff},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0xff}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, // uint64
				},
			},
			// uint16
			{
				Value: 256,
				MsgPack: [][]byte{
					{0xcd, 0x01, 0x00},                                     // uint16
					{0xce, 0x00, 0x00, 0x01, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00}, // uint64
				},
			},
			{
				Value: 65535,
				MsgPack: [][]byte{
					{0xcd, 0xff, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff}, // uint64
				},
			},
			// uint32
			{
				Value: 65536,
				MsgPack: [][]byte{
					{0xce, 0x00, 0x01, 0x00, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00}, // uint64
				},
			},
			{
				Value: 0xffffffff,
				MsgPack: [][]byte{
					{0xce, 0xff, 0xff, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff}, // uint64
				},
			},
		},
		Uint64: []uint64TestCase{
			// uint8
			{
				Value: 127,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // uint8
					{0xd1, 0x00, 0x7f},             // uint16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
				},
			},
			{
				Value: 255,
				MsgPack: [][]byte{
					{0xcc, 0xff},                   // uint8
					{0xcd, 0x00, 0xff},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0xff}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, // uint64
				},
			},
			// uint16
			{
				Value: 256,
				MsgPack: [][]byte{
					{0xcd, 0x01, 0x00},                                     // uint16
					{0xce, 0x00, 0x00, 0x01, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00}, // uint64
				},
			},
			{
				Value: 65535,
				MsgPack: [][]byte{
					{0xcd, 0xff, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff}, // uint64
				},
			},
			// uint32
			{
				Value: 65536,
				MsgPack: [][]byte{
					{0xce, 0x00, 0x01, 0x00, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00}, // uint64
				},
			},
			{
				Value: 0xffffffff,
				MsgPack: [][]byte{
					{0xce, 0xff, 0xff, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff}, // uint64
				},
			},
			// uint64
			{
				Value: 0xffffffff + 1,
				MsgPack: [][]byte{
					{0xcf, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00}, // uint64
				},
			},
			{
				Value: 0xffffffffffffffff,
				MsgPack: [][]byte{
					{0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // uint64
				},
			},
		},
		Int8: []int8TestCase{
			// int8
			{
				Value: 127,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // int8
					{0xd1, 0x00, 0x7f},             // int16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // int64
				},
			},
			{
				Value: -128,
				MsgPack: [][]byte{
					{0xd0, 0x80},                   // int8
					{0xd1, 0x00, 0x80},             // int16
					{0xd2, 0x00, 0x00, 0x00, 0x80}, // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // int64
				},
			},
		},
		Int16: []int16TestCase{
			// int8
			{
				Value: math.MaxInt8,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // int8
					{0xd1, 0x00, 0x7f},             // int16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // int64
				},
			},
			{
				Value: math.MinInt8,
				MsgPack: [][]byte{
					{0xd0, 0x80},                   // int8
					{0xd1, 0xff, 0x80},             // int16
					{0xd2, 0xff, 0xff, 0xff, 0x80}, // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80}, // int64
				},
			},
			// int16
			{
				Value: math.MaxInt8 + 1,
				MsgPack: [][]byte{
					{0xcd, 0x00, 0x80},                                     // uint16
					{0xce, 0x00, 0x00, 0x00, 0x80},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // uint64
					{0xd1, 0x00, 0x80},                                     // int16
					{0xd2, 0x00, 0x00, 0x00, 0x80},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // int64
				},
			},
			{
				Value: math.MinInt8 - 1,
				MsgPack: [][]byte{
					{0xd1, 0xff, 0x7f},                                     // int16
					{0xd2, 0xff, 0xff, 0xff, 0x7f},                         // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f}, // int64
				},
			},
			{
				Value: math.MaxInt16,
				MsgPack: [][]byte{
					{0xcd, 0x7f, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0x7f, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // uint64
					{0xd1, 0x7f, 0xff},                                     // int16
					{0xd2, 0x00, 0x00, 0x7f, 0xff},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt16,
				MsgPack: [][]byte{
					{0xd1, 0x80, 0x00},                                     // uint16
					{0xd2, 0xff, 0xff, 0x80, 0x00},                         // uint32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00}, // uint64
				},
			},
		},
		Int32: []int32TestCase{
			// int8
			{
				Value: math.MaxInt8,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // int8
					{0xd1, 0x00, 0x7f},             // int16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // int64
				},
			},
			{
				Value: math.MinInt8,
				MsgPack: [][]byte{
					{0xd0, 0x80},                   // int8
					{0xd1, 0xff, 0x80},             // int16
					{0xd2, 0xff, 0xff, 0xff, 0x80}, // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80}, // int64
				},
			},
			// int16
			{
				Value: math.MaxInt8 + 1,
				MsgPack: [][]byte{
					{0xcd, 0x00, 0x80},                                     // uint16
					{0xce, 0x00, 0x00, 0x00, 0x80},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // uint64
					{0xd1, 0x00, 0x80},                                     // int16
					{0xd2, 0x00, 0x00, 0x00, 0x80},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // int64
				},
			},
			{
				Value: math.MinInt8 - 1,
				MsgPack: [][]byte{
					{0xd1, 0xff, 0x7f},                                     // int16
					{0xd2, 0xff, 0xff, 0xff, 0x7f},                         // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f}, // int64
				},
			},
			{
				Value: math.MaxInt16,
				MsgPack: [][]byte{
					{0xcd, 0x7f, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0x7f, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // uint64
					{0xd1, 0x7f, 0xff},                                     // int16
					{0xd2, 0x00, 0x00, 0x7f, 0xff},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt16,
				MsgPack: [][]byte{
					{0xd1, 0x80, 0x00},                                     // uint16
					{0xd2, 0xff, 0xff, 0x80, 0x00},                         // uint32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00}, // uint64
				},
			},
			// int32
			{
				Value: math.MaxInt16 + 1,
				MsgPack: [][]byte{
					{0xce, 0x00, 0x00, 0x80, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}, // uint64
					{0xd2, 0x00, 0x00, 0x80, 0x00},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}, // int64
				},
			},
			{
				Value: math.MinInt16 - 1,
				MsgPack: [][]byte{
					{0xd2, 0xff, 0xff, 0x7f, 0xff},                         // uint32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff}, // uint64
				},
			},
			{
				Value: math.MaxInt32,
				MsgPack: [][]byte{
					{0xce, 0x7f, 0xff, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff}, // uint64
					{0xd2, 0x7f, 0xff, 0xff, 0xff},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt32,
				MsgPack: [][]byte{
					{0xd2, 0x80, 0x00, 0x00, 0x00},                         // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00}, // int64
				},
			},
		},
		Int64: []int64TestCase{
			// int8
			{
				Value: math.MaxInt8,
				MsgPack: [][]byte{
					{0x7f},                         // positive fixint
					{0xcc, 0x7f},                   // uint8
					{0xcd, 0x00, 0x7f},             // uint16
					{0xce, 0x00, 0x00, 0x00, 0x7f}, // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // uint64
					{0xd0, 0x7f},                   // int8
					{0xd1, 0x00, 0x7f},             // int16
					{0xd2, 0x00, 0x00, 0x00, 0x7f}, // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f}, // int64
				},
			},
			{
				Value: math.MinInt8,
				MsgPack: [][]byte{
					{0xd0, 0x80},                   // int8
					{0xd1, 0xff, 0x80},             // int16
					{0xd2, 0xff, 0xff, 0xff, 0x80}, // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80}, // int64
				},
			},
			// int16
			{
				Value: math.MaxInt8 + 1,
				MsgPack: [][]byte{
					{0xcd, 0x00, 0x80},                                     // uint16
					{0xce, 0x00, 0x00, 0x00, 0x80},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // uint64
					{0xd1, 0x00, 0x80},                                     // int16
					{0xd2, 0x00, 0x00, 0x00, 0x80},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}, // int64
				},
			},
			{
				Value: math.MinInt8 - 1,
				MsgPack: [][]byte{
					{0xd1, 0xff, 0x7f},                                     // int16
					{0xd2, 0xff, 0xff, 0xff, 0x7f},                         // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f}, // int64
				},
			},
			{
				Value: math.MaxInt16,
				MsgPack: [][]byte{
					{0xcd, 0x7f, 0xff},                                     // uint16
					{0xce, 0x00, 0x00, 0x7f, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // uint64
					{0xd1, 0x7f, 0xff},                                     // int16
					{0xd2, 0x00, 0x00, 0x7f, 0xff},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt16,
				MsgPack: [][]byte{
					{0xd1, 0x80, 0x00},                                     // uint16
					{0xd2, 0xff, 0xff, 0x80, 0x00},                         // uint32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00}, // uint64
				},
			},
			// int32
			{
				Value: math.MaxInt16 + 1,
				MsgPack: [][]byte{
					{0xce, 0x00, 0x00, 0x80, 0x00},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}, // uint64
					{0xd2, 0x00, 0x00, 0x80, 0x00},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}, // int64
				},
			},
			{
				Value: math.MinInt16 - 1,
				MsgPack: [][]byte{
					{0xd2, 0xff, 0xff, 0x7f, 0xff},                         // uint32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff}, // uint64
				},
			},
			{
				Value: math.MaxInt32,
				MsgPack: [][]byte{
					{0xce, 0x7f, 0xff, 0xff, 0xff},                         // uint32
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff}, // uint64
					{0xd2, 0x7f, 0xff, 0xff, 0xff},                         // int32
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt32,
				MsgPack: [][]byte{
					{0xd2, 0x80, 0x00, 0x00, 0x00},                         // int32
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00}, // int64
				},
			},
			// int64
			{
				Value: math.MaxInt32 + 1,
				MsgPack: [][]byte{
					{0xcf, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00}, // uint64
					{0xd3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00}, // int64
				},
			},
			{
				Value: math.MinInt32 - 1,
				MsgPack: [][]byte{
					{0xd3, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff}, // int64
				},
			},
			{
				Value: math.MaxInt64,
				MsgPack: [][]byte{
					{0xcf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // uint64
					{0xd3, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // int64
				},
			},
			{
				Value: math.MinInt64,
				MsgPack: [][]byte{
					{0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // int64
				},
			},
		},
		Float32: []float32TestCase{
			{
				Value: 1.234567,
				MsgPack: [][]byte{
					{0xca, 0x3f, 0x9e, 0x06, 0x4b},
				},
			},
			{
				Value: -1.234567,
				MsgPack: [][]byte{
					{0xca, 0xbf, 0x9e, 0x06, 0x4b},
				},
			},
		},
		Float64: []float64TestCase{
			{
				Value: 1.23456789123456,
				MsgPack: [][]byte{
					{0xcb, 0x3f, 0xf3, 0xc0, 0xca, 0x42, 0xd8, 0xb4, 0xb7}, // ca3ff3c0ca42d8b4b7
				},
			},
			{
				Value: -1.23456789123456,
				MsgPack: [][]byte{
					{0xcb, 0xbf, 0xf3, 0xc0, 0xca, 0x42, 0xd8, 0xb4, 0xb7},
				},
			},
		},
		String: []stringTestCase{
			{
				Value: "",
				MsgPack: [][]byte{
					{0xa0},                         // fixstr
					{0xd9, 0x00},                   // str8
					{0xda, 0x00, 0x00},             // str16
					{0xdb, 0x00, 0x00, 0x00, 0x00}, // str32
				},
			},
			{
				Value: "Hello",
				MsgPack: [][]byte{
					{0xa5, 'H', 'e', 'l', 'l', 'o'},                         // fixstr
					{0xd9, 0x05, 'H', 'e', 'l', 'l', 'o'},                   // str8
					{0xda, 0x00, 0x05, 'H', 'e', 'l', 'l', 'o'},             // str16
					{0xdb, 0x00, 0x00, 0x00, 0x05, 'H', 'e', 'l', 'l', 'o'}, // str32
				},
			},
			{
				Value: strings.Repeat("A", 32),
				MsgPack: [][]byte{
					append([]byte{0xd9, 32}, bytes.Repeat([]byte{'A'}, 32)...),          // str8
					append([]byte{0xda, 0, 32}, bytes.Repeat([]byte{'A'}, 32)...),       // str16
					append([]byte{0xdb, 0, 0, 0, 32}, bytes.Repeat([]byte{'A'}, 32)...), // str32
				},
			},
			{
				Value: strings.Repeat("A", 255),
				MsgPack: [][]byte{
					append([]byte{0xd9, 0xff}, bytes.Repeat([]byte{'A'}, 255)...),                   // str8
					append([]byte{0xda, 0x00, 0xff}, bytes.Repeat([]byte{'A'}, 255)...),             // str16
					append([]byte{0xdb, 0x00, 0x00, 0x00, 0xff}, bytes.Repeat([]byte{'A'}, 255)...), // str32
				},
			},
			{
				Value: strings.Repeat("A", 256),
				MsgPack: [][]byte{
					append([]byte{0xda, 0x01, 0x00}, bytes.Repeat([]byte{'A'}, 256)...),             // str16
					append([]byte{0xdb, 0x00, 0x00, 0x01, 0x00}, bytes.Repeat([]byte{'A'}, 256)...), // str32
				},
			},
			{
				Value: strings.Repeat("A", math.MaxUint16),
				MsgPack: [][]byte{
					append([]byte{0xda, 0xff, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint16)...),             // str16
					append([]byte{0xdb, 0x00, 0x00, 0xff, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint16)...), // str32
				},
			},
			{
				Value: strings.Repeat("A", math.MaxUint16+1),
				MsgPack: [][]byte{
					append([]byte{0xdb, 0x00, 0x01, 0x00, 0x00}, bytes.Repeat([]byte{'A'}, math.MaxUint16+1)...), // str32
				},
			},
		},
		Binary: []binaryTestCase{
			{
				Value: []byte{},
				MsgPack: [][]byte{
					{0xc4, 0x00},                   // bin8
					{0xc5, 0x00, 0x00},             // bin16
					{0xc6, 0x00, 0x00, 0x00, 0x00}, // bin32
				},
			},
			{
				Value: []byte("Hello"),
				MsgPack: [][]byte{
					append([]byte{0xc4, 0x05}, []byte("Hello")...),                   // bin8
					append([]byte{0xc5, 0x00, 0x05}, []byte("Hello")...),             // bin16
					append([]byte{0xc6, 0x00, 0x00, 0x00, 0x05}, []byte("Hello")...), // bin32
				},
			},
			{
				Value: bytes.Repeat([]byte{'A'}, math.MaxUint8),
				MsgPack: [][]byte{
					append([]byte{0xc4, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint8)...),                   // bin8
					append([]byte{0xc5, 0x00, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint8)...),             // bin16
					append([]byte{0xc6, 0x00, 0x00, 0x00, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint8)...), // bin32
				},
			},
			{
				Value: bytes.Repeat([]byte{'A'}, math.MaxUint8+1),
				MsgPack: [][]byte{
					append([]byte{0xc5, 0x01, 0x00}, bytes.Repeat([]byte{'A'}, math.MaxUint8+1)...),             // bin16
					append([]byte{0xc6, 0x00, 0x00, 0x01, 0x00}, bytes.Repeat([]byte{'A'}, math.MaxUint8+1)...), // bin32
				},
			},
			{
				Value: bytes.Repeat([]byte{'A'}, math.MaxUint16),
				MsgPack: [][]byte{
					append([]byte{0xc5, 0xff, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint16)...),             // bin16
					append([]byte{0xc6, 0x00, 0x00, 0xff, 0xff}, bytes.Repeat([]byte{'A'}, math.MaxUint16)...), // bin32
				},
			},
			{
				Value: bytes.Repeat([]byte{'A'}, math.MaxUint16+1),
				MsgPack: [][]byte{
					append([]byte{0xc6, 0x00, 0x01, 0x00, 0x00}, bytes.Repeat([]byte{'A'}, math.MaxUint16+1)...), // bin32
				},
			},
		},
		Array: []arrayTestCase{
			{
				Value: []int{},
				MsgPack: [][]byte{
					{0x90},                         // fix array
					{0xdc, 0x00, 0x00},             // array16
					{0xdd, 0x00, 0x00, 0x00, 0x00}, // array32
				},
			},
			{
				Value: []int{0x01, 0x02, 0x03, 0x04, 0x05},
				MsgPack: [][]byte{
					{0x95, 0x01, 0x02, 0x03, 0x04, 0x05},                         // fix array
					{0xdc, 0x00, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05},             // array16
					{0xdd, 0x00, 0x00, 0x00, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05}, // array32
				},
			},
			{
				Value: repeatInt(1, 15),
				MsgPack: [][]byte{
					append([]byte{0x9f}, bytes.Repeat([]byte{0x01}, 15)...),                         // fix array
					append([]byte{0xdc, 0x00, 0x0f}, bytes.Repeat([]byte{0x01}, 15)...),             // array16
					append([]byte{0xdd, 0x00, 0x00, 0x00, 0x0f}, bytes.Repeat([]byte{0x01}, 15)...), // array32
				},
			},
			{
				Value: repeatInt(1, 16),
				MsgPack: [][]byte{
					append([]byte{0xdc, 0x00, 0x10}, bytes.Repeat([]byte{0x01}, 16)...),             // array16
					append([]byte{0xdd, 0x00, 0x00, 0x00, 0x10}, bytes.Repeat([]byte{0x01}, 16)...), // array32
				},
			},
			{
				Value: repeatInt(1, math.MaxUint16),
				MsgPack: [][]byte{
					append([]byte{0xdc, 0xff, 0xff}, bytes.Repeat([]byte{0x01}, math.MaxUint16)...),             // array16
					append([]byte{0xdd, 0x00, 0x00, 0xff, 0xff}, bytes.Repeat([]byte{0x01}, math.MaxUint16)...), // array32
				},
			},
			{
				Value: repeatInt(1, math.MaxUint16+1),
				MsgPack: [][]byte{
					append([]byte{0xdd, 0x00, 0x01, 0x00, 0x00}, bytes.Repeat([]byte{0x01}, math.MaxUint16+1)...), // array32
				},
			},
		},
		Map: []mapTestCase{
			{
				Value: map[int]int{},
				MsgPack: [][]byte{
					{0x80},                         // fixmap
					{0xde, 0x00, 0x00},             // map16
					{0xdf, 0x00, 0x00, 0x00, 0x00}, // map16
				},
			},
			{
				Value: map[int]int{
					0: 0,
					1: 1,
				},
				MsgPack: [][]byte{
					{0x82, 0x00, 0x00, 0x01, 0x01},                         // fixmap
					{0x82, 0x01, 0x01, 0x00, 0x00},                         // fixmap
					{0xde, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01},             // map16
					{0xde, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00},             // map16
					{0xdf, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01}, // map32
					{0xdf, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00}, // map32
				},
			},
		},
		Time: []timeTestCase{
			{
				Value: time.Date(2000, 1, 1, 12, 34, 56, 0, time.UTC),
				MsgPack: [][]byte{
					{0xd6, 0xff, 0x38, 0x6d, 0xf4, 0x70},
					{0xd7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6d, 0xf4, 0x70},
					{0xc7, 12, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6d, 0xf4, 0x70},
				},
			},
			{
				Value: time.Date(2000, 1, 1, 12, 34, 56, 789, time.UTC),
				MsgPack: [][]byte{
					{0xd7, 0xff, 0x00, 0x00, 0x0c, 0x54, 0x38, 0x6d, 0xf4, 0x70},
					{0xc7, 12, 0xff, 0x00, 0x00, 0x03, 0x15, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6d, 0xf4, 0x70},
				},
			},
			{
				Value: time.Unix(0x0400000000, 0).UTC(),
				MsgPack: [][]byte{
					{0xc7, 12, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00},
				},
			},
		},
	}
)

func repeatInt(v int, count int) []int {
	s := make([]int, 0, count)
	for i := 0; i < count; i++ {
		s = append(s, v)
	}
	return s
}
